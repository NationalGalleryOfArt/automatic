# This file was generated by automatic (https://github.com/NationalGalleryOfArt/automatic).
# For full documentation, see: https://automatic.readthedocs.io/
"""Implementation for OpenAPI specification."""

from datetime import datetime
from typing import Dict, Any, List, Optional
from automatic import (
    NotFoundError,
    ValidationError,
    ConflictError,
)

class {{ class_name }}:
    """Model layer for {{ resource_name }} resources."""

    def __init__(self):
        # In-memory store - replace with actual persistence layer if needed
        self._data_store: Dict[str, Dict] = {}

    def index(self, filters: Optional[Dict] = None) -> List[Dict]:
        """
        List all resources.

        Args:
            filters: Optional dict with 'limit' and 'offset' for pagination.

        Returns:
            List of resource dicts.

        Raises:
            None directly, but downstream code may raise exceptions.
        """
        resources = list(self._data_store.values())
        # Basic filtering (limit/offset) if needed
        if filters:
            limit = filters.get("limit", 100)
            offset = filters.get("offset", 0)
            resources = resources[offset : offset + limit]
        return resources

    def show(self, resource_id: str) -> Dict:
        """
        Retrieve a single resource by ID.

        Args:
            resource_id: The ID of the resource.

        Returns:
            The resource dict.

        Raises:
            NotFoundError: If the resource does not exist.
        """
        if resource_id not in self._data_store:
            raise NotFoundError(f"{resource_id} not found")
        return self._data_store[resource_id]

    def create(self, data: Dict) -> Dict:
        """
        Create a new resource.

        Args:
            data: Dict containing resource fields.

        Returns:
            The created resource dict.

        Raises:
            ValidationError: If required fields are missing or invalid.
            ConflictError: If a resource with the same ID already exists.
        """
        # Example validation: require 'name'
        if "name" not in data or not data["name"]:
            raise ValidationError("Name is required")
        resource_id = data["name"].lower().replace(" ", "_")
        if resource_id in self._data_store:
            raise ConflictError(f"{resource_id} already exists")
        now = datetime.utcnow().isoformat() + "Z"
        resource = {
            "id": resource_id,
            "name": data["name"],
            "created_at": now,
            "updated_at": now,
            **data
        }
        self._data_store[resource_id] = resource
        return resource

    def update(self, resource_id: str, data: Dict) -> Dict:
        """
        Update an existing resource.

        Args:
            resource_id: The ID of the resource to update.
            data: Dict of fields to update.

        Returns:
            The updated resource dict.

        Raises:
            NotFoundError: If the resource does not exist.
            ValidationError: If updated fields are invalid.
        """
        if resource_id not in self._data_store:
            raise NotFoundError(f"{resource_id} not found")
        # Example validation: require 'name' if present
        if "name" in data and not data["name"]:
            raise ValidationError("Name cannot be empty")
        resource = self._data_store[resource_id].copy()
        resource.update(data)
        resource["updated_at"] = datetime.utcnow().isoformat() + "Z"
        self._data_store[resource_id] = resource
        return resource

    def destroy(self, resource_id: str) -> None:
        """
        Delete a resource.

        Args:
            resource_id: The ID of the resource to delete.

        Raises:
            NotFoundError: If the resource does not exist.
        """
        if resource_id not in self._data_store:
            raise NotFoundError(f"{resource_id} not found")
        del self._data_store[resource_id]
