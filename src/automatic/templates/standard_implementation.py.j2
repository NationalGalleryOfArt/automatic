# This file was generated by automatic (https://github.com/NationalGalleryOfArt/automatic).
# For full documentation, see: https://automatic.readthedocs.io/
"""Implementation for OpenAPI specification."""

from typing import Dict, Any
import json
from automatic import (
    BaseImplementation,
    NotFoundError,
    ValidationError,
    ConflictError,
    UnauthorizedError,
    ForbiddenError
)


class {{ class_name }}(BaseImplementation):
    """Implementation for OpenAPI operations."""

    def __init__(self):
        """Initialize the implementation."""
        super().__init__()

{% for route in routes %}
    def {{ route.operation_id }}(self, data: Dict[str, Any], version: int = 1) -> Dict[str, Any]:
        """
        {{ route.summary }}

        {{ route.description }}

        Method: {{ route.method }}
        Path: {{ route.path }}

        Args:
            data: Request data containing:
                - Path parameters (if any)
                - Query parameters (if any) 
                - Request body (if any)
                - Authentication info in data['auth'] (if configured)
            version: API version (if applicable)

        Returns:
            Dict with response data. HTTP status code is automatically inferred from method type.
            (GET=200, POST=201, PUT=200, PATCH=200, DELETE=204)

        Raises:
{%- for error_code in route.error_codes %}
{%- if error_code == '400' %}
            ValidationError: For invalid input (400)
{%- elif error_code == '401' %}
            UnauthorizedError: For authentication required (401)
{%- elif error_code == '403' %}
            ForbiddenError: For insufficient permissions (403)
{%- elif error_code == '404' %}
            NotFoundError: For resource not found (404)
{%- elif error_code == '409' %}
            ConflictError: For resource conflicts (409)
{%- endif %}
{%- else %}
            BusinessException: For any business logic errors
{%- endfor %}
            NotImplementedError: For unimplemented operations (501)
        """
        print("Called with:", json.dumps(data, indent=2))
        raise NotImplementedError("{{ route.operation_id }} is not implemented yet.")
        # return {"result": "success"}
{% endfor %}
