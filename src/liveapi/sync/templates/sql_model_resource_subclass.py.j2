from liveapi.implementation.sql_model_resource import SQLModelResource
from .models import {{ model_name }}


class {{ class_name }}(SQLModelResource):
    """Custom {{ resource_name }} service implementation.
    
    This service inherits from SQLModelResource and provides database persistence.
    Override any method below to customize the behavior for {{ resource_name }}.
    
    Example customizations:
    - Add custom validation in create/update methods
    - Implement custom filtering in list method  
    - Add business logic hooks
    - Customize error handling
    """
    
    def __init__(self, session):
        """Initialize the service with the database session."""
        super().__init__(model={{ model_name }}, resource_name="{{ resource_name }}", session=session)
    
    # Uncomment and customize any methods below:
    
    # async def create(self, data: Dict[str, Any]) -> Dict[str, Any]:
    #     """Custom create logic for {{ resource_name }}."""
    #     # Add any pre-processing here
    #     # validated_data = self._validate_create_data(data)
    #     return await super().create(data)
    
    # async def update(self, resource_id: str, data: Dict[str, Any], partial: bool = False) -> Dict[str, Any]:
    #     """Custom update logic for {{ resource_name }}.""" 
    #     # Add any pre-processing here
    #     # validated_data = self._validate_update_data(data)
    #     return await super().update(resource_id, data, partial)
    
    # async def list(self, limit: int = 100, offset: int = 0, **filters: Any) -> List[Dict[str, Any]]:
    #     """Custom list logic for {{ resource_name }}."""
    #     # Add custom filtering logic here
    #     # processed_filters = self._process_filters(filters)
    #     return await super().list(limit=limit, offset=offset, **filters)
    
    # def _validate_create_data(self, data: Dict[str, Any]) -> Dict[str, Any]:
    #     """Custom validation for create operations."""
    #     # Add your validation logic here
    #     return data
    
    # def _validate_update_data(self, data: Dict[str, Any]) -> Dict[str, Any]:
    #     """Custom validation for update operations."""
    #     # Add your validation logic here  
    #     return data